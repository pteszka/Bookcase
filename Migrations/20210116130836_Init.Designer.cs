// <auto-generated />
using System;
using Bookcase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookcase.Migrations
{
    [DbContext(typeof(BookcaseContext))]
    [Migration("20210116130836_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Bookcase.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin1@admin.pl",
                            Name = "admin1",
                            Password = "adminadmin1",
                            Role = 0
                        },
                        new
                        {
                            Id = 11,
                            Email = "member1@member.pl",
                            Name = "member1",
                            Password = "membermember1",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin2@admin.pl",
                            Name = "admin2",
                            Password = "adminadmin2",
                            Role = 0
                        },
                        new
                        {
                            Id = 12,
                            Email = "member2@member.pl",
                            Name = "member2",
                            Password = "membermember2",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin3@admin.pl",
                            Name = "admin3",
                            Password = "adminadmin3",
                            Role = 0
                        },
                        new
                        {
                            Id = 13,
                            Email = "member3@member.pl",
                            Name = "member3",
                            Password = "membermember3",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "admin4@admin.pl",
                            Name = "admin4",
                            Password = "adminadmin4",
                            Role = 0
                        },
                        new
                        {
                            Id = 14,
                            Email = "member4@member.pl",
                            Name = "member4",
                            Password = "membermember4",
                            Role = 1
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin5@admin.pl",
                            Name = "admin5",
                            Password = "adminadmin5",
                            Role = 0
                        },
                        new
                        {
                            Id = 15,
                            Email = "member5@member.pl",
                            Name = "member5",
                            Password = "membermember5",
                            Role = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "admin6@admin.pl",
                            Name = "admin6",
                            Password = "adminadmin6",
                            Role = 0
                        },
                        new
                        {
                            Id = 16,
                            Email = "member6@member.pl",
                            Name = "member6",
                            Password = "membermember6",
                            Role = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "admin7@admin.pl",
                            Name = "admin7",
                            Password = "adminadmin7",
                            Role = 0
                        },
                        new
                        {
                            Id = 17,
                            Email = "member7@member.pl",
                            Name = "member7",
                            Password = "membermember7",
                            Role = 1
                        },
                        new
                        {
                            Id = 8,
                            Email = "admin8@admin.pl",
                            Name = "admin8",
                            Password = "adminadmin8",
                            Role = 0
                        },
                        new
                        {
                            Id = 18,
                            Email = "member8@member.pl",
                            Name = "member8",
                            Password = "membermember8",
                            Role = 1
                        },
                        new
                        {
                            Id = 9,
                            Email = "admin9@admin.pl",
                            Name = "admin9",
                            Password = "adminadmin9",
                            Role = 0
                        },
                        new
                        {
                            Id = 19,
                            Email = "member9@member.pl",
                            Name = "member9",
                            Password = "membermember9",
                            Role = 1
                        },
                        new
                        {
                            Id = 10,
                            Email = "admin10@admin.pl",
                            Name = "admin10",
                            Password = "adminadmin10",
                            Role = 0
                        },
                        new
                        {
                            Id = 20,
                            Email = "member10@member.pl",
                            Name = "member10",
                            Password = "membermember10",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Bookcase.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Bookcase.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("PubYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("numberOfPages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("GenreID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Bookcase.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Bookcase.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("Bookcase.Models.Book", b =>
                {
                    b.HasOne("Bookcase.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookcase.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookcase.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bookcase.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookcase.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Bookcase.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
